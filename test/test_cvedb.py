import asyncio
import datetime
import os
import shutil
import sys
import tempfile

import aiohttp
import pytest

from cve_bin_tool.cvedb import CVEDB
from .utils import event_loop


def get_event_loop():
    loop = asyncio.get_event_loop()
    if sys.platform.startswith("win"):
        if isinstance(loop, asyncio.SelectorEventLoop):
            loop = asyncio.ProactorEventLoop()
            asyncio.set_event_loop(loop)
    return loop


class TestCVEDB:
    @classmethod
    def setup_class(cls):
        cls.cvedb = CVEDB(
            cachedir=tempfile.mkdtemp(prefix="cvedb-"), session=aiohttp.ClientSession()
        )

    @classmethod
    def teardown_class(cls):
        shutil.rmtree(cls.cvedb.cachedir)
        loop = get_event_loop()
        if cls.cvedb.session:
            aws = asyncio.ensure_future(cls.cvedb.session.close())
            loop.run_until_complete(aws)

    @pytest.mark.asyncio
    async def test_00_getmeta(self):
        _jsonurl, meta = await self.cvedb.getmeta(
            "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.meta"
        )
        assert "sha256" in meta

    @pytest.mark.asyncio
    async def test_01_nist_scrape(self):
        jsonshas = await self.cvedb.nist_scrape()
        assert (
            "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2015.json.gz"
            in jsonshas
        )

    @pytest.mark.asyncio
    async def test_02_cache_update(self):
        jsonurl, meta = await self.cvedb.getmeta(
            "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2015.meta"
        )
        assert "sha256" in meta
        await self.cvedb.cache_update(jsonurl, meta["sha256"])

    @pytest.mark.asyncio
    async def test_03_refresh(self):
        await self.cvedb.refresh()
        years = self.cvedb.nvd_years()
        for year in range(2002, datetime.datetime.now().year):
            assert year in years, f"Missing NVD data for {year}"

    @pytest.mark.asyncio
    async def test_04_verify_false(self):
        self.cvedb.verify = False
        with self.cvedb:
            assert os.path.isfile(
                os.path.join(self.cvedb.cachedir, "nvdcve-1.1-2015.json.gz")
            )
